{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","props","Card","style","height","CardImg","top","width","src","this","poster","alt","title","CardBody","CardTitle","fontSize","fontWeight","CardSubtitle","genres","rating","CardText","summary","slice","Component","App","state","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","className","Row","sm","Col","map","element","key","id","medium_cover_image","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oWAMqBA,E,kDACjB,WAAYC,GAAO,uCACTA,G,qDAGN,OACI,6BACI,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,OAAO,MACjB,kBAACC,EAAA,EAAD,CAASC,KAAG,EAACC,MAAM,OAAOC,IAAKC,KAAKR,MAAMS,OAAQC,IAAKF,KAAKR,MAAMW,QAClE,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAWX,MAAO,CAACY,SAAS,GAAIC,WAAW,SAAUP,KAAKR,MAAMW,OAChE,kBAACK,EAAA,EAAD,CAAcd,MAAO,CAACY,SAAS,KAA/B,WAA6CN,KAAKR,MAAMiB,OAAO,GAA/D,KACA,kBAACD,EAAA,EAAD,CAAcd,MAAO,CAACY,SAAS,KAA/B,YAA8CN,KAAKR,MAAMkB,OAAzD,OACA,6BACA,kBAACC,EAAA,EAAD,CAAUjB,MAAO,CAACY,SAAS,KAAMN,KAAKR,MAAMoB,QAAQC,MAAM,EAAE,KAA5D,c,GAdeC,a,gBCCdC,G,kNACnBC,MAAM,CACFC,WAAU,EAAMC,OAAO,I,EAIrBC,U,sBAAU,8BAAAC,EAAA,sEAC+BC,IAAMC,IAAI,4DADzC,gBACaJ,EADb,EACDK,KAAOA,KAAOL,OAErBM,QAAQC,IAAIP,GACZ,EAAKQ,SAAS,CAACR,OAAOA,EAAQD,WAAU,IAJhC,2C,kEASRjB,KAAKmB,c,+BAIT,OAEE,6BAASQ,UAAU,aAEjB,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACC,EAAA,EAAD,CAAKD,GAAG,MACR,kBAACC,EAAA,EAAD,CAAKD,GAAG,IAAInC,MAAO,CAACY,SAAS,GAAIC,WAAW,WAA5C,uDAKF,kBAACqB,EAAA,EAAD,KACK5B,KAAKgB,MAAMC,UACN,yBAAKU,UAAU,UACX,0BAAMA,UAAU,eAAhB,iBAGN3B,KAAKgB,MAAME,OAAOa,KAAI,SAASC,GAC/B,OAAO,kBAACF,EAAA,EAAD,CAAKD,GAAG,KACX,kBAAC,EAAD,CAAOI,IAAKD,EAAQE,GACpB/B,MAAO6B,EAAQ7B,MACfS,QAASoB,EAAQpB,QACjBF,OAAQsB,EAAQtB,OAChBT,OAAQ+B,EAAQG,mBAChB1B,OAAQuB,EAAQvB,mB,GA3CLK,cCKbsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.37de34b7.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {\r\n    Card, CardImg, CardText, CardBody,\r\n    CardTitle, CardSubtitle\r\n  } from 'reactstrap';\r\n\r\nexport default class Movie extends Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card style={{height:800}}>\r\n                    <CardImg top width=\"100%\" src={this.props.poster} alt={this.props.title} />\r\n                    <CardBody>\r\n                    <CardTitle style={{fontSize:17, fontWeight:\"bold\"}}>{this.props.title}</CardTitle>\r\n                    <CardSubtitle style={{fontSize:15}}>Genre : {this.props.genres[0]} </CardSubtitle>\r\n                    <CardSubtitle style={{fontSize:15}}>Rating : {this.props.rating}/10</CardSubtitle>\r\n                    <br></br>\r\n                    <CardText style={{fontSize:14}}>{this.props.summary.slice(0,180)}...</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport axios from \"axios\";\nimport Movie from './Movie';\nimport {Container,Row, Col} from 'reactstrap';\nimport './App.css';\n\n\nexport default class App extends Component {\n  state={\n      isLoading:true, movies:[]\n    }\n\n        //axios가 느려서 천천히 실행되므로 비동기적 실행이 되기 때문에 async await 사용\n        getMovies=async ()=>{\n          const {data: {data: {movies}}} = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n          //console.log(movies.data.data.movies); 위 코드에서 const movies=await axios.get이런 식일 때 console.log를 이렇게 작성\n          console.log(movies);\n          this.setState({movies:movies, isLoading:false});\n        }\n\n\n      componentDidMount(){\n          this.getMovies();    \n      }\n\n      render() {\n      return (\n\n        <section className=\"Container\">\n         \n          <Row sm=\"5\">\n            <Col sm=\"4\"></Col>\n            <Col sm=\"7\" style={{fontSize:25, fontWeight:\"bolder\"}}>\n              The Most Popular Movies at the website named \"YTS\"\n            </Col>            \n          </Row>\n          \n          <Row>\n              {this.state.isLoading ? \n                    <div className=\"loader\">\n                        <span className=\"loader-text\"> Loading... </span>\n                    </div> \n                 : \n                  this.state.movies.map(function(element){\n                  return <Col sm=\"3\">\n                      <Movie key={element.id}\n                      title={element.title} \n                      summary={element.summary} \n                      rating={element.rating}\n                      poster={element.medium_cover_image}\n                      genres={element.genres}></Movie>\n                      </Col>\n                  })\n                 \n              }\n          </Row>\n          \n        </section>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}